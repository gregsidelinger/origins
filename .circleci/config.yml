# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
orbs:
  docker-publish: circleci/docker-publish@0.1.6
  kubernetes: circleci/kubernetes@0.2.0

workflows:
  version: 2
  origins:
    jobs:
      - tests

      - docker-publish/publish:
          image: gregsidelinger/origins
          tag: $CIRCLE_SHA1
          requires:
            - tests
          context: DockerHub

      - user-approval:
          type: approval
          requires:
            - docker-publish/publish

      - deploy:
          context: DigitalOcean
          requires:
            - user-approval

version: 2.1
jobs:
  tests:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - values
            - charts

  deploy:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      #- image: lachlanevenson/k8s-kubectl:v1.10.3
      - image: circleci/buildpack-deps:19.04-curl

    working_directory: ~/repo

    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - kubernetes/install
      - run:
          name: Deploy via helm
          environment:
            DIGITALOCEAN_ENABLE_BETA: "1"
          command: |
            #echo "${KUBE_CONFIG}" | base64 -d >> kube.conf

            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get -o install-helm.sh
            bash install-helm.sh  --version v2.13.1
            #curl -sL https://github.com/digitalocean/doctl/releases/download/v1.16.0/doctl-1.16.0-linux-amd64.tar.gz | tar -xzv -C /usr/local/bin
            curl -sL https://github.com/digitalocean/doctl/releases/download/v1.16.0/doctl-1.16.0-linux-amd64.tar.gz | tar -xzv
            ls  -l
            find .
            ./doctl kubernetes cluster kubeconfig save origins -t ${DO_TOKEN}
            kubectl config get-contexts
            kubectl config get-clusters
            kubectl config set-cluster do-nyc1-origins
            kubectl config use-context do-nyc1-origins
            kubectl config current-context
            kubectl get ns
            #kubectl --kubeconfig kube.conf apply -f kubernetes/origins.yaml
            #helm --kubeconfig kube.conf upgrade --install --atomic origins charts/origins --namespace=default -f values/do.yaml --set image.tag=$CIRCLE_SHA1
            
            helm  upgrade --install --atomic origins charts/origins --namespace=default -f values/do.yaml --set image.tag=$CIRCLE_SHA1


