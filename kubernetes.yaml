---
apiVersion: v1
kind: Service
metadata:
  name: origins
  labels:
    app: origins
spec:
  #type: LoadBalancer
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app: origins

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: origins
spec:
  selector:
    matchLabels:
      app: origins
  replicas: 1
  revisionHistoryLimit: 5
  template:
    metadata:
      labels:
        app: origins
    spec:
      containers:
      - name: origins
        image: gregsidelinger/origins:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SAMPLE_ENV_VAR
          value: "dummy_value"
        # HTTPD Checks
        livenessProbe:
          httpGet:
            path: /api
            port: 8080
            #scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 15
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api
            port: 8080
            #scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 15
          failureThreshold: 3
          successThreshold: 1


---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: origins
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/secure-backends: "false"
    #kubernetes.io/ingress.allow-http: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - origins.jtks.net
    secretName: origins-tls
  rules:
  - host: origins.jtks.net
    http:
      paths:
      - backend:
          serviceName: origins
          servicePort: http

